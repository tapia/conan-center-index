import org.yaml.snakeyaml.Yaml

RAISE_HOOKS = true


@NonCPS
static removeDuplicates(List list) {
    list.unique(true, { lhs, rhs -> lhs <=> rhs })
}


def envInside(shFunction, Closure closure) {
    String venvDirectory = isUnix() ? "${pwd()}/conanenv" : "${pwd()}\\conanenv"
    String binPath = isUnix() ? "$venvDirectory/bin/" : "$venvDirectory\\Scripts\\"
    String conanHome = isUnix() ? "${pwd()}/.conan" : "${pwd()}\\.conan"
    String hookErrorLevel = RAISE_HOOKS ? "40" : "50"
    withEnv(["PATH+EXTRA=${binPath}", "CONAN_USER_HOME=${conanHome}", "CONAN_USER_HOME_SHORT=${conanHome}", "CONAN_HOOK_ERROR_LEVEL=${hookErrorLevel}"]) {
        //shFunction("conan --version")
        closure()
    }
}

def envCreate(shFunction, Map ctxt) {
    String venvDirectory = isUnix() ? "${pwd()}/conanenv" : "${pwd()}\\conanenv"
    String binPath = isUnix() ? "$venvDirectory/bin/" : "$venvDirectory\\Scripts\\"
    stage("Configure environment") {
        shFunction("${ctxt.python_host} --version")
        shFunction("${ctxt.python_host} -m venv $venvDirectory")
        
        shFunction("dir $venvDirectory")
        shFunction("dir $venvDirectory\\Scripts")
        shFunction("${binPath}python -m pip install -U pip")
        shFunction("${binPath}python -m pip install -e git+https://github.com/conan-io/conan.git@develop#egg=conan")

        envInside(shFunction) {
            shFunction('conan --version')
        }
    }
}

def createReferenceUnix(String conanfilePath, String reference, Map ctxt) {
    try {
        envCreate({data -> sh(data)}, ctxt)
    }
    finally {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true,
            cleanWhenSuccess: true, cleanWhenUnstable: true, disableDeferredWipeout: true, deleteDirs: true,
            notFailBuild: true)
    }
}

def createReferenceWindows(String conanfilePath, String reference, Map ctxt) {
    try {
        envCreate({data -> bat(data)}, ctxt)
    }
    finally {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true,
            cleanWhenSuccess: true, cleanWhenUnstable: true, disableDeferredWipeout: true, deleteDirs: true,
            notFailBuild: true)
    }
}


node('Linux') {
    List<String> recipes = []
    stage('Compute changes') {
        def urc = scm.userRemoteConfigs
        urc[0].refspec = "${urc[0].refspec} +refs/heads/master:refs/remotes/origin/master"
        checkout([
            $class: 'GitSCM',
            branches: scm.branches,
            doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
            extensions: scm.extensions,
            userRemoteConfigs: urc
        ])

        def output = sh(script: 'git diff --name-only origin/master --diff-filter=AMR', returnStdout: true)
        for (line in output.split('\n')) {
            def matcher = (line =~ /^recipes\/([^\/]+)\//)
            if (matcher) {
                recipes.add(matcher[0][1] as String)
            }
        }
        removeDuplicates(recipes)
    }

    List toBuild = []
    stage('Parse config.yml to get versions') {
        for (recipe in recipes) {
            String content = readFile("recipes/${recipe}/config.yml")
            Yaml parser = new Yaml()
            Map data = parser.load(content)
            def versions = data.get('versions')
            for (int i = 0; i < versions.size(); i++) {
                def version = versions.keySet()[i]
                Map<String, String> props = versions[version]
                toBuild.add([
                    folder: "recipes/${recipe}/${props.folder}/conanfile.py",
                    reference: "${recipe}/${version}"
                ])
            }
        }
        echo "Recipes to build:\n - ${ toBuild.collect({ "$it.reference: $it.folder" }).join('\n - ')}"
    }

    toBuild.each { entry ->
        stage("Build ${entry.reference}") {
            parallel(
                /*
                linux: {
                    docker.image('conanio/gcc10').inside {
                        String venvDirectory = "${pwd()}/conanenv"
                        sh("python3 -m venv $venvDirectory")
                        withEnv(["PATH+EXTRA=$venvDirectory/bin"]) {
                            createReferenceUnix(entry.folder, entry.reference, [python: "python", python_host: 'python3'])
                        }
                    }
                },
                macos: {
                    node('Macos') {
                        String venvDirectory = "${pwd()}/conanenv"
                        sh("python3 -m venv $venvDirectory")
                        withEnv(["PATH+EXTRA=$venvDirectory/bin"]) {
                            createReferenceUnix(entry.folder, entry.reference, [python: "python", python_host: 'python3'])
                        }
                    }
                },*/
                windows: {
                    node('Windows') {
                        createReferenceWindows(entry.folder, entry.reference, [python: "python", python_host: 'C:\\Python39\\python.exe'])
                    }
                }
            )
        }
    }
}
