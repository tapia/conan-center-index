import org.yaml.snakeyaml.Yaml

@NonCPS
static removeDuplicatedProfiles(List list) {
    list.unique(true, { lhs, rhs -> lhs <=> rhs })
}


def createReferenceUnix(String conanfilePath, String reference) {
    try {
        sh 'python3 --version'
    }
    finally {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true,
            cleanWhenSuccess: true, cleanWhenUnstable: true, disableDeferredWipeout: true, deleteDirs: true,
            notFailBuild: true)
    }
}

def createReferenceWindows(String conanfilePath, String reference) {
    try {
        bat 'python3 --version'
    }
    finally {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true,
            cleanWhenSuccess: true, cleanWhenUnstable: true, disableDeferredWipeout: true, deleteDirs: true,
            notFailBuild: true)
    }
}


node('Linux') {
    List<String> recipes = []
    stage('Compute changes') {
        def urc = scm.userRemoteConfigs
        urc[0].refspec = "${urc[0].refspec} +refs/heads/master:refs/remotes/origin/master"
        checkout([
            $class: 'GitSCM',
            branches: scm.branches,
            doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
            extensions: scm.extensions,
            userRemoteConfigs: urc
        ])

        def output = sh(script: 'git diff --name-only origin/master --diff-filter=AMR', returnStdout: true)
        for (line in output.split('\n')) {
            def matcher = (line =~ /^recipes\/([^\/]+)\//)
            if (matcher) {
                recipes.add(matcher[0][1] as String)
            }
        }
        removeDuplicatedProfiles(recipes)
    }

    List toBuild = []
    stage('Parse config.yml to get versions') {
        for (recipe in recipes) {
            String content = readFile("recipes/${recipe}/config.yml")
            Yaml parser = new Yaml()
            Map data = parser.load(content)
            def versions = data.get('versions')
            for (int i = 0; i < versions.size(); i++) {
                def version = versions.keySet()[i]
                Map<String, String> props = versions[version]
                toBuild.add([
                    folder: "recipes/${recipe}/${props.folder}/conanfile.py",
                    reference: "${recipe}/${version}"
                ])
            }
        }
        echo "Recipes to build:\n - ${ toBuild.collect({ "$it.reference: $it.folder" }).join('\n - ')}"
    }

    toBuild.each { entry ->
        stage("Build ${entry.reference}") {
            parallel(
                linux: {
                    docker.image('conanio/gcc10').inside {
                        createReference(entry.folder, entry.reference)
                    }
                },
                macos: {
                    node('Macos') {
                        createReference(entry.folder, entry.reference)
                    }
                },
                windows: {
                    node('Windows') {
                        createReference(entry.folder, entry.reference)
                    }
                }
            )
        }
    }
}
